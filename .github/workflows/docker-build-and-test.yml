name: Build and Test Docker
on:
  workflow_call:
    inputs:
      platform:
        type: string
        required: true

jobs:
  build:
    name: 'Build: ${{ matrix.target }}'
    runs-on: ${{ inputs.platform == 'arm64' && 'ubuntu-22.04-arm' || 'ubuntu-24.04' }}
    strategy:
      matrix:
        target: [ web, worker, legacy-importer, database-migration, e2e ]
    steps:
    # https://github.com/actions/virtual-environments/issues/1187
    - name: Tune linux network
      run: sudo ethtool -K eth0 tx off rx off
    - uses: actions/checkout@v5
      with:
        submodules: true
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Generate image name
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository }}/${{ matrix.target }}
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        echo "IMAGE_ID=$IMAGE_ID" >> "$GITHUB_ENV"
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_ID }}
        bake-target: ${{ matrix.target }}
    - name: Build the Docker image
      id: build
      uses: docker/bake-action@v6.9.0
      with:
        source: .
        files: |
          ./docker-compose.yml
          ./docker-compose.importer.yml
          ./docker-compose.e2e.yml
          ${{ steps.meta.outputs.bake-file-labels }}
        targets: ${{ matrix.target }}
        set: |
          ${{ matrix.target }}.output=type=image,push-by-digest=true,name-canonical=true,push=true
          ${{ matrix.target }}.tags=${{ env.IMAGE_ID }}
          ${{ matrix.target }}.args.deployment_id=${{ github.run_id }}
          *.platform=linux/${{ inputs.platform }}
          *.cache-from=type=gha,scope=build-${{ inputs.platform }}-${{ matrix.target }}
          *.cache-to=type=gha,scope=build-${{ inputs.platform }}-${{ matrix.target }},mode=max,ignore-error=true
    - name: Export digest
      run: |
        mkdir -p /tmp/digests/${{ matrix.target }}
        digest=$(jq -cr '."${{ matrix.target }}"."containerimage.digest"' <<< '${{ steps.build.outputs.metadata }}')
        touch "/tmp/digests/${{ matrix.target }}/${digest#sha256:}"
    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: docker-digests-${{ inputs.platform }}-${{ matrix.target }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1

  test-compose:
    name: 'Test: docker compose'
    runs-on: ubuntu-24.04
    if: inputs.platform == 'amd64'
    needs: build
    steps:
    - name: Add hosts
      run: sudo echo "127.0.0.1 en.gw2treasures.localhost" | sudo tee -a /etc/hosts
    - uses: actions/checkout@v5
    - uses: ./.github/actions/pull-images
      with:
        platform: ${{ inputs.platform }}
    - name: Start docker compose
      run: docker compose up -d
    - name: Wait 30s
      run: sleep 30
    - run: docker compose ps -a
    - run: docker compose logs
    - name: Verify docker containers are running
      run: docker inspect --format "{{.ID}} {{.Name}} {{.State.Status}} {{.RestartCount}}" $(docker compose ps -aq) | node .github/actions/docker-compose-status.js
    - run: curl --fail-with-body http://en.gw2treasures.localhost:3000/
    - name: Stop docker compose
      run: docker compose down

  test-kubernetes:
    name: 'Test: kubernetes'
    runs-on: ubuntu-24.04
    if: inputs.platform == 'amd64'
    needs: build
    steps:
    - uses: actions/checkout@v5
    - uses: nolar/setup-k3d-k3s@v1
      with:
        version: v1.26
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - uses: ./.github/actions/pull-images
      with:
        platform: ${{ inputs.platform }}
    - name: Import images into k3d
      run: k3d image import gw2treasures/web gw2treasures/worker gw2treasures/legacy-importer gw2treasures/database-migration
    - run: kubectl apply -k kubernetes/local
    - run: kubectl rollout status deployment database-pg17 next worker -n gw2treasures --timeout=180s
    - run: kubectl get deployment -n gw2treasures
      if: success() || failure()
    - run: kubectl get job -n gw2treasures
      if: success() || failure()
    - run: kubectl logs -l app.kubernetes.io/part-of=gw2treasures -n gw2treasures --all-containers --ignore-errors
      if: failure() || runner.debug == '1'

  test-e2e:
    name: 'Test: e2e'
    runs-on: ubuntu-24.04
    if: inputs.platform == 'amd64'
    needs: build
    steps:
    - uses: actions/checkout@v5
    - uses: ./.github/actions/pull-images
      with:
        platform: ${{ inputs.platform }}
    - name: Start docker compose
      run: docker compose -f docker-compose.yml -f docker-compose.e2e.yml up -d web database database-migration
    - name: Wait for containers to be up
      run: sleep 30
    - name: Run e2e tests
      run: docker compose -f docker-compose.yml -f docker-compose.e2e.yml up e2e --no-log-prefix --exit-code-from e2e
    - name: Stop docker compose
      run: docker compose down
