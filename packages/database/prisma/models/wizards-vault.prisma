model WizardsVaultSeason {
  id String @id @default(uuid())

  name_de String
  name_en String
  name_es String
  name_fr String

  start DateTime
  end   DateTime

  current_de   Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String   @unique

  current_en   Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String   @unique

  current_es   Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String   @unique

  current_fr   Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String   @unique

  history WizardsVaultSeasonHistory[]

  lastCheckedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Int @default(0)
}

model WizardsVaultSeasonHistory {
  wizardsVaultSeasonId String
  revisionId           String

  wizardsVaultSeason WizardsVaultSeason @relation(fields: [wizardsVaultSeasonId], references: [id], onDelete: Cascade)
  revision           Revision           @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([wizardsVaultSeasonId, revisionId])
}

model WizardsVaultListing {
  id Int @id

  itemId    Int?
  item      Item? @relation("wizardsvault_listing", fields: [itemId], references: [id], onDelete: SetNull)
  itemIdRaw Int

  count Int
  type  WizardsVaultListingType
  cost  Int
  limit Int?

  removedFromApi Boolean @default(false)

  current   Revision @relation("current", fields: [currentId], references: [id], onDelete: Cascade)
  currentId String   @unique

  history WizardsVaultListingHistory[]

  lastCheckedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Int @default(0)
}

model WizardsVaultListingHistory {
  wizardsVaultListingId Int
  revisionId            String

  guildUpgrade WizardsVaultListing @relation(fields: [wizardsVaultListingId], references: [id], onDelete: Cascade)
  revision     Revision            @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([wizardsVaultListingId, revisionId])
}

enum WizardsVaultListingType {
  Featured
  Normal
  Legacy
}

model WizardsVaultObjective {
  id Int @id

  name_de String
  name_en String
  name_es String
  name_fr String

  track   WizardsVaultTrack
  acclaim Int

  waypointId Int?

  removedFromApi Boolean @default(false)

  current_de   Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String   @unique

  current_en   Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String   @unique

  current_es   Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String   @unique

  current_fr   Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String   @unique

  history WizardsVaultObjectiveHistory[]

  lastCheckedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Int @default(0)
}

model WizardsVaultObjectiveHistory {
  wizardsVaultObjectiveId Int
  revisionId              String

  guildUpgrade WizardsVaultObjective @relation(fields: [wizardsVaultObjectiveId], references: [id], onDelete: Cascade)
  revision     Revision              @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([wizardsVaultObjectiveId, revisionId])
}

enum WizardsVaultTrack {
  PvE
  PvP
  WvW
}
