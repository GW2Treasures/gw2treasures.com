generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Item {
  id Int @id

  name_de String
  name_en String
  name_es String
  name_fr String

  icon   Icon? @relation(fields: [iconId], references: [id])
  iconId Int?

  rarity  String  @default("")
  type    String  @default("")
  subtype String?
  weight  String?
  value   Int     @default(0)
  level   Int     @default(0)

  // skins
  unlocksSkin    Skin[]
  unlocksSkinIds Int[]

  // recipes
  recipeOutput     Recipe[]         @relation(name: "recipe_output")
  ingredient       IngredientItem[]

  unlocksRecipe    Recipe[]         @relation(name: "unlocks_recipe")
  unlocksRecipeIds Int[]

  // achievements
  achievementRewards Achievement[] @relation(name: "rewards_item")
  achievementBits    Achievement[] @relation(name: "bits_item")

  // items
  suffixItems   Item[] @relation(name: "suffix")
  suffixItemIds Int[]
  suffixIn      Item[] @relation(name: "suffix")

  contains    Content[] @relation("contains")
  containedIn Content[] @relation("containedIn")

  // currency
  containsCurrency CurrencyContent[] @relation("containsCurrency")

  // review queue
  reviews Review[] @relation("itemReview")


  removedFromApi Boolean @default(false)

  current_de Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String @unique
  
  current_en Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String @unique
  
  current_es Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String @unique
  
  current_fr Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String @unique

  history ItemHistory[]
  
  lastCheckedAt  DateTime   @default(now())

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  version Int @default(0)
}

model Icon {
  id Int @id
  signature String
  
  color String?

  items Item[]
  skills Skill[]
  skins Skin[]
  achievements Achievement[]
  achievementCategories AchievementCategory[]
  currencies Currency[]
}

model Content {
  containerItemId Int
  contentItemId   Int

  quantity Int
  chance ContentChance

  containerItem Item @relation("contains", fields: [containerItemId], references: [id])
  contentItem   Item @relation("containedIn", fields: [contentItemId], references: [id])

  @@id([containerItemId, contentItemId])
}

enum ContentChance {
  Chance
  Choice
  Guaranteed
}

model CurrencyContent {
  containerItemId Int
  currencyId      Int

  min Int
  max Int

  containerItem Item     @relation("containsCurrency", fields: [containerItemId], references: [id])
  currency      Currency @relation("containedCurrency", fields: [currencyId], references: [id])

  @@id([containerItemId, currencyId])
}

model ItemHistory {
  itemId Int
  revisionId String @unique

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([itemId, revisionId])
}

model Skill {
  id Int @id
  
  name_de String
  name_en String
  name_es String
  name_fr String

  icon   Icon? @relation(fields: [iconId], references: [id])
  iconId Int?

  removedFromApi Boolean @default(false)

  current_de Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String @unique
  
  current_en Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String @unique
  
  current_es Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String @unique
  
  current_fr Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String @unique

  history SkillHistory[]
  
  lastCheckedAt  DateTime   @default(now())

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  version Int @default(0)
}

model SkillHistory {
  skillId Int
  revisionId String

  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)
  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([skillId, revisionId])
}

model Skin {
  id Int @id
  
  name_de String
  name_en String
  name_es String
  name_fr String

  icon   Icon? @relation(fields: [iconId], references: [id])
  iconId Int?

  rarity  String  @default("")
  type    String  @default("")
  subtype String?
  weight  String?

  unlockedByItems Item[]
  achievementBits Achievement[] @relation(name: "bits_skin")

  unlocks Float?

  wikiImage String?
  wikiImageType WikiImageType?

  removedFromApi Boolean @default(false)
  
  current_de Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String @unique
  
  current_en Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String @unique
  
  current_es Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String @unique
  
  current_fr Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String @unique

  history SkinHistory[]
  
  lastCheckedAt  DateTime   @default(now())

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  version Int @default(0)
}

enum WikiImageType {
  Skin
  Set
}

model SkinHistory {
  skinId Int
  revisionId String

  skin Skin @relation(fields: [skinId], references: [id], onDelete: Cascade)
  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([skinId, revisionId])
}

model Recipe {
  id Int @id

  type        String
  rating      Int
  disciplines String[]

  outputCount   Int
  timeToCraftMs Int

  flags String[] @default([])

  unlockedByItems Item[] @relation(name: "unlocks_recipe")

  outputItemId    Int?
  outputItem      Item? @relation(name: "recipe_output", fields: [outputItemId], references: [id])
  outputItemIdRaw Int?

  itemIngredients   IngredientItem[]
  itemIngredientIds Int[]

  removedFromApi Boolean @default(false)
  
  currentRevision   Revision @relation("current", fields: [currentRevisionId], references: [id], onDelete: Cascade)
  currentRevisionId String @unique

  history Revision[]

  lastCheckedAt  DateTime   @default(now())

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  version Int @default(0)
}

model IngredientItem {
  recipeId Int
  itemId   Int

  count Int

  Recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  Item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([recipeId, itemId])
}

model Achievement {
  id Int @id
  
  name_de String
  name_en String
  name_es String
  name_fr String

  historic Boolean        @default(true)
  points   Int            @default(0)
  mastery  MasteryRegion?

  icon   Icon? @relation(fields: [iconId], references: [id])
  iconId Int?

  achievementCategory AchievementCategory? @relation("achievements", fields: [achievementCategoryId], references: [id])
  achievementCategoryId Int?

  isCategoryDisplay Boolean @default(false)
  categoryDisplayFor AchievementCategory[] @relation("categoryDisplay")

  prerequisites    Achievement[] @relation(name: "prerequisites")
  prerequisitesIds Int[]
  prerequisiteFor  Achievement[] @relation(name: "prerequisites")

  bitsItem    Item[] @relation(name: "bits_item")
  bitsItemIds Int[]

  bitsSkin    Skin[] @relation(name: "bits_skin")
  bitsSkinIds Int[]

  rewardsItem    Item[] @relation(name: "rewards_item")
  rewardsItemIds Int[]

  unlocks Float?

  removedFromApi Boolean @default(false)
  
  current_de Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String @unique
  
  current_en Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String @unique
  
  current_es Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String @unique
  
  current_fr Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String @unique

  history AchievementHistory[]
  
  lastCheckedAt  DateTime   @default(now())

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  version Int @default(0)
}

enum MasteryRegion {
  Tyria
  Desert
  Maguuma
  Tundra
  Unknown
}

model AchievementHistory {
  achievementId Int
  revisionId String

  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([achievementId, revisionId])
}

model AchievementGroup {
  id String @id
  
  name_de String
  name_en String
  name_es String
  name_fr String

  order Int
  
  achievementCategories AchievementCategory[]

  removedFromApi Boolean @default(false)
  
  current_de Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String @unique
  
  current_en Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String @unique
  
  current_es Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String @unique
  
  current_fr Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String @unique

  history AchievementGroupHistory[]
  
  lastCheckedAt  DateTime   @default(now())

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  version Int @default(0)
}

model AchievementGroupHistory {
  achievementGroupId String
  revisionId String

  achievementGroup AchievementGroup @relation(fields: [achievementGroupId], references: [id], onDelete: Cascade)
  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([achievementGroupId, revisionId])
}


model AchievementCategory {
  id Int @id
  
  name_de String
  name_en String
  name_es String
  name_fr String

  icon   Icon? @relation(fields: [iconId], references: [id])
  iconId Int?

  achievementGroup AchievementGroup? @relation(fields: [achievementGroupId], references: [id])
  achievementGroupId String?

  order Int

  achievements Achievement[]   @relation("achievements")

  categoryDisplay   Achievement? @relation("categoryDisplay", fields: [categoryDisplayId], references: [id])
  categoryDisplayId Int?

  removedFromApi Boolean @default(false)
  
  current_de Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String @unique
  
  current_en Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String @unique
  
  current_es Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String @unique
  
  current_fr Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String @unique

  history AchievementCategoryHistory[]
  
  lastCheckedAt  DateTime   @default(now())

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  version Int @default(0)
}

model AchievementCategoryHistory {
  achievementCategoryId Int
  revisionId String

  achievementCategory AchievementCategory @relation(fields: [achievementCategoryId], references: [id], onDelete: Cascade)
  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([achievementCategoryId, revisionId])
}

model Revision {
  id String @id @default(uuid())

  entity String?

  data String
  description String?
  type RevisionType @default(Update)

  language Language

  build Build @relation(fields: [buildId], references: [id])
  buildId Int
  
  createdAt DateTime @default(now())

  @@index([language, type])

  // items
  currentItem_de Item? @relation("current_de")
  currentItem_en Item? @relation("current_en")
  currentItem_es Item? @relation("current_es")
  currentItem_fr Item? @relation("current_fr")
  itemHistory ItemHistory?
  
  // skills
  currentSkill_de Skill? @relation("current_de")
  currentSkill_en Skill? @relation("current_en")
  currentSkill_es Skill? @relation("current_es")
  currentSkill_fr Skill? @relation("current_fr")
  skillHistory SkillHistory[]
  
  // skins
  currentSkin_de Skin? @relation("current_de")
  currentSkin_en Skin? @relation("current_en")
  currentSkin_es Skin? @relation("current_es")
  currentSkin_fr Skin? @relation("current_fr")
  skinHistory SkinHistory[]
  
  // achievements
  currentAchievement_de Achievement? @relation("current_de")
  currentAchievement_en Achievement? @relation("current_en")
  currentAchievement_es Achievement? @relation("current_es")
  currentAchievement_fr Achievement? @relation("current_fr")
  achievementHistory AchievementHistory[]
  
  // achievement groups
  currentAchievementGroup_de AchievementGroup? @relation("current_de")
  currentAchievementGroup_en AchievementGroup? @relation("current_en")
  currentAchievementGroup_es AchievementGroup? @relation("current_es")
  currentAchievementGroup_fr AchievementGroup? @relation("current_fr")
  achievementGroupHistory AchievementGroupHistory[]
  
  // achievement categories
  currentAchievementCategory_de AchievementCategory? @relation("current_de")
  currentAchievementCategory_en AchievementCategory? @relation("current_en")
  currentAchievementCategory_es AchievementCategory? @relation("current_es")
  currentAchievementCategory_fr AchievementCategory? @relation("current_fr")
  achievementCategoryHistory AchievementCategoryHistory[]
  
  // currencies
  currentCurrency_de Currency? @relation("current_de")
  currentCurrency_en Currency? @relation("current_en")
  currentCurrency_es Currency? @relation("current_es")
  currentCurrency_fr Currency? @relation("current_fr")
  currencyHistory CurrencyHistory[]

  // recipes
  currentRecipe Recipe? @relation("current")
  recipeHistory Recipe[]
}

enum RevisionType {
  Update
  Import
  Added
  Removed
}

model Build {
  id Int @id

  revisions Revision[]
  
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Currency {
  id Int @id

  name_de String
  name_en String
  name_es String
  name_fr String

  icon   Icon? @relation(fields: [iconId], references: [id])
  iconId Int?

  order Int

  containedIn CurrencyContent[] @relation("containedCurrency")

  removedFromApi Boolean @default(false)
  
  current_de Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String @unique
  
  current_en Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String @unique
  
  current_es Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String @unique
  
  current_fr Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String @unique

  history CurrencyHistory[]
  
  lastCheckedAt  DateTime   @default(now())

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  version Int @default(0)
}

model CurrencyHistory {
  currencyId Int
  revisionId String

  currency Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([currencyId, revisionId])
}

model Job {
  id String @id @default(uuid())
  
  priority Int @default(1)
  type String
  data Json

  state JobState @default(Queued)
  output String @default("")

  flags String[] @default([])

  cron String?
  
  scheduledAt DateTime @default(now())
  startedAt DateTime?
  finishedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Language {
  de
  en
  es
  fr
}

enum JobState {
  Queued
  Running
  Success
  Error
}

model ApiRequest {
  id String @id @default(uuid())

  endpoint String
  queryParameters String
  
  status Int
  statusText String

  responseTimeMs Float
  
  createdAt DateTime @default(now())
}

model User {
  id String @id @default(uuid())

  name  String  @unique
  email String? @unique

  roles UserRole[] @default([])

  sessions  UserSession[]  @relation("session")
  providers UserProvider[] @relation("provider")

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  reviewsRequested Review[] @relation("requester")
  reviewsReviewed  Review[] @relation("reviewer")

  applications Application[] @relation("application")
}

enum UserRole {
  Admin
}

model UserSession {
  id String @id @default(uuid())
  
  info String

  user   User @relation("session", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())
}

model UserProvider {
  provider          String
  providerAccountId String

  @@id([provider, providerAccountId])

  displayName String

  accessToken          String?
  accessTokenExpiresAt DateTime?
  
  refreshToken          String?
  refreshTokenExpiresAt DateTime?

  userId String
  user   User   @relation("provider", fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Application {
  id String @id @default(uuid())

  name String

  apiKey String @unique

  owner   User @relation("application", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Review {
  id String @id @default(uuid())

  requesterId String?
  requester   User?   @relation("requester", fields: [requesterId], references: [id], onDelete: SetNull)

  reviewerId  String?
  reviewer    User?   @relation("reviewer", fields: [reviewerId], references: [id], onDelete: SetNull)

  queue ReviewQueue
  changes Json
  state ReviewState @default(Open)

  relatedItemId Int?
  relatedItem   Item? @relation("itemReview", fields: [relatedItemId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  reviewedAt DateTime?
}

enum ReviewQueue {
  ContainerContent
}

enum ReviewState {
  Open
  Approved
  Rejected
}
