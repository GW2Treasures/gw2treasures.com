{
  "extends": "next/core-web-vitals",
  "plugins": ["@typescript-eslint"],

  "rules": {
    // `"foo"` → `'foo'`
    "@typescript-eslint/quotes": ["warn", "single"],

    // `<C foo='bar'>` → `<C foo="bar">`
    "jsx-quotes": ["warn", "prefer-double"],

    // `< C / >` → `<C/>`
    "react/jsx-tag-spacing": ["warn", {
      "closingSlash": "never",
      "beforeSelfClosing": "never",
      "afterOpening": "never",
      "beforeClosing": "never"
    }],

    // `<C prop={'test'}/>` → `<C prop="test"/>`
    "react/jsx-curly-brace-presence": ["warn", "never"],

    // `a => a` → `(a) => a`
    "arrow-parens": "warn",

    // `(a)=>a` → `(a) => a`
    "arrow-spacing": "warn",

    // `foo( bar )` → `foo(bar)`
    "space-in-parens": "warn",

    // disallows multipe spaces
    "no-multi-spaces": "warn",

    // disallow multiple empty lines
    "no-multiple-empty-lines": "warn",

    // only 1 property per line for objects (enforced only for > 3 properties or multiline values)
    "object-curly-newline": ["warn", { "multiline": true, "consistent": true }],

    // `{foo: bar}` → `{ foo: bar }`
    "object-curly-spacing": ["warn", "always", { "objectsInObjects": false }],

    // `{ foo:bar }` → `{ foo: bar }`
    "key-spacing": "warn",

    // `{ x: x }` → `{ x }`
    "object-shorthand": "warn",

    // allows (but does not require) dangling commas in multiline
    "comma-dangle": ["warn", "only-multiline"],

    // `foo(bar,baz)` → `foo(bar, baz)`
    "comma-spacing": "warn",

    // add parens around jsx
    "react/jsx-wrap-multilines": ["warn", {
      "declaration": "parens-new-line",
      "assignment": "parens-new-line",
      "return": "parens-new-line",
      "arrow": "parens-new-line",
      "condition": "parens-new-line",
      "logical": "parens-new-line",
      "prop": "parens-new-line"
    }],

    // multiline closing bracket location
    "react/jsx-closing-bracket-location": ["warn", {
      "nonEmpty": "line-aligned",
      "selfClosing": "after-props"
    }],

    // indent jsx with 2 spaces
    "react/jsx-indent": ["warn", 2, { "checkAttributes": true, "indentLogicalExpressions": true }],

    // indent props with 2 spaces
    "react/jsx-indent-props": ["warn", 2],

    // `1+1` → `1 + 1`
    "space-infix-ops": "warn",

    // disallows using the array index as key
    "react/no-array-index-key": "warn",

    // `<Foo></Foo>` → `<Foo/>`
    "react/self-closing-comp": "warn",

    // `<Foo bar={true}>` → `<Foo bar/>`
    "react/jsx-boolean-value": "warn",

    // align the closing JSX tag with the opening tag
    "react/jsx-closing-tag-location": "warn",

    // `<React.Fragment>` → `<>`
    "react/jsx-fragments": "warn",

    // require key
    "react/jsx-key": ["warn", { "checkFragmentShorthand": true }],

    // prevent multiple spaces in jsx
    "react/jsx-props-no-multi-spaces": "warn",

    // `<Foo bar={ baz }>` → `<Foo bar={baz}/>`
    "react/jsx-curly-spacing": "warn",

    // require semicolon
    "semi": "warn",

    // disallows async functions not using await
    "require-await": "warn",

    // require dependencies to be in package.json
    "import/no-extraneous-dependencies": "error"
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "rules": {
        "@typescript-eslint/type-annotation-spacing": "warn",

        "@typescript-eslint/naming-convention": ["warn", {
          "selector": "default", "format": null
        },{
          "selector": "typeLike", "format": ["PascalCase"]
        }]
      }
    }
  ]
}
