name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  # renovate: datasource=npm packageName=npm
  NPM_VERSION: 10.9.0

  # renovate: datasource=node-version packageName=node
  NODE_18_VERSION: 18.20.4
  # renovate: datasource=node-version packageName=node
  NODE_20_VERSION: 20.18.0
  # renovate: datasource=node-version packageName=node
  NODE_22_VERSION: 22.10.0


jobs:
  build-node:
    name: Build / Node ${{ matrix.node }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 18, 20, 22 ]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup Node.js env
      uses: ./.github/actions/setup-node-env
      with:
        node-version: ${{ env[format('NODE_{0}_VERSION', matrix.node)] }}
        cache-key: build
    - name: Run Build
      run: npm run build
      env:
        SKIP_LINT: true

  docker:
    name: Docker (${{ matrix.platform }})
    strategy:
      matrix:
        platform: [ amd64, arm64 ]
    uses: ./.github/workflows/docker-build-and-test.yml
    with:
      platform: ${{ matrix.platform }}

  test-unit:
    name: Test / Unit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup Node.js env
      uses: ./.github/actions/setup-node-env
      with:
        cache-key: test
    - name: Run Test
      run: npm run test

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup Node.js env
      uses: ./.github/actions/setup-node-env
      with:
        cache-key: lint
    - name: Run Lint
      run: npm run lint

  renovate:
    name: Renovate
    uses: ./.github/workflows/renovate-validate-config.yml

  success:
    name: Success
    needs: [docker, test-unit, build-node, lint, renovate]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check job status
      run: jq --exit-status 'all(.result == "success")' <<< '${{ toJson(needs) }}'
    - name: Success
      run: exit 0

  publish-docker:
    name: Publish (docker)
    if: github.event_name != 'merge_group'
    needs: [success]
    uses: ./.github/workflows/publish-docker.yml

  publish-npm:
    name: Publish (npm)
    if: github.event_name != 'merge_group'
    needs: [success]
    uses: ./.github/workflows/publish-npm.yml
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
