model Achievement {
  id Int @id

  name_de String
  name_en String
  name_es String
  name_fr String

  historic Boolean        @default(true)
  points   Int            @default(0)
  mastery  MasteryRegion?

  flags String[]

  icon   Icon? @relation(fields: [iconId], references: [id])
  iconId Int?

  achievementCategory   AchievementCategory? @relation("achievements", fields: [achievementCategoryId], references: [id])
  achievementCategoryId Int?

  isCategoryDisplay  Boolean               @default(false)
  categoryDisplayFor AchievementCategory[] @relation("categoryDisplay")

  prerequisites    Achievement[] @relation(name: "prerequisites")
  prerequisitesIds Int[]
  prerequisiteFor  Achievement[] @relation(name: "prerequisites")

  bitsItem    Item[] @relation(name: "bits_item")
  bitsItemIds Int[]

  bitsSkin    Skin[] @relation(name: "bits_skin")
  bitsSkinIds Int[]

  bitsMini    Mini[] @relation(name: "bits_mini")
  bitsMiniIds Int[]

  rewardsItem    Item[] @relation(name: "rewards_item")
  rewardsItemIds Int[]

  rewardsTitle    Title[] @relation(name: "rewards_title")
  rewardsTitleIds Int[]

  unlocks Float?

  removedFromApi Boolean @default(false)

  views Int @default(0)

  current_de   Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String   @unique

  current_en   Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String   @unique

  current_es   Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String   @unique

  current_fr   Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String   @unique

  history AchievementHistory[]

  lastCheckedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Int @default(0)

  @@index([createdAt])
  @@index([name_de(ops: raw("gin_trgm_ops")), name_en(ops: raw("gin_trgm_ops")), name_es(ops: raw("gin_trgm_ops")), name_fr(ops: raw("gin_trgm_ops"))], type: Gin)
}

enum MasteryRegion {
  Tyria
  Desert
  Maguuma
  Tundra
  Jade
  Sky
  Unknown
}

model AchievementHistory {
  achievementId Int
  revisionId    String

  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  revision    Revision    @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([achievementId, revisionId])
}

model AchievementGroup {
  id String @id

  name_de String
  name_en String
  name_es String
  name_fr String

  order Int

  achievementCategories AchievementCategory[]

  removedFromApi Boolean @default(false)

  current_de   Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String   @unique

  current_en   Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String   @unique

  current_es   Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String   @unique

  current_fr   Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String   @unique

  history AchievementGroupHistory[]

  lastCheckedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Int @default(0)
}

model AchievementGroupHistory {
  achievementGroupId String
  revisionId         String

  achievementGroup AchievementGroup @relation(fields: [achievementGroupId], references: [id], onDelete: Cascade)
  revision         Revision         @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([achievementGroupId, revisionId])
}

model AchievementCategory {
  id Int @id

  name_de String
  name_en String
  name_es String
  name_fr String

  icon   Icon? @relation(fields: [iconId], references: [id])
  iconId Int?

  achievementGroup   AchievementGroup? @relation(fields: [achievementGroupId], references: [id])
  achievementGroupId String?

  order Int

  achievements Achievement[] @relation("achievements")

  categoryDisplay   Achievement? @relation("categoryDisplay", fields: [categoryDisplayId], references: [id])
  categoryDisplayId Int?

  removedFromApi Boolean @default(false)

  current_de   Revision @relation("current_de", fields: [currentId_de], references: [id], onDelete: Cascade)
  currentId_de String   @unique

  current_en   Revision @relation("current_en", fields: [currentId_en], references: [id], onDelete: Cascade)
  currentId_en String   @unique

  current_es   Revision @relation("current_es", fields: [currentId_es], references: [id], onDelete: Cascade)
  currentId_es String   @unique

  current_fr   Revision @relation("current_fr", fields: [currentId_fr], references: [id], onDelete: Cascade)
  currentId_fr String   @unique

  history AchievementCategoryHistory[]

  lastCheckedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Int @default(0)
}

model AchievementCategoryHistory {
  achievementCategoryId Int
  revisionId            String

  achievementCategory AchievementCategory @relation(fields: [achievementCategoryId], references: [id], onDelete: Cascade)
  revision            Revision            @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@id([achievementCategoryId, revisionId])
}
